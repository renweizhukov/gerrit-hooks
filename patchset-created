#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#   Copyright (c) 2016      Wei Ren <renwei@smartconn.cc>
#
#
# This is a simple Gerrit hook for updating Redmine with information about what changes
# are in Gerrit review.
#
# It parses the commit messages from Gerrit and looks for a Redmine issue in the style
# of "#1028".
#
# It then adds a informative message to the Redmine issue about the review URL and other
# data. It may also change the status of the issue to indicate that this issue is now
# under gerrit review.
#
# Script is tested with Redmine 3.2.0-stable and Gerrit 2.10.4/2.12.2.

import optparse
from subprocess import check_output # Need python 2.7 for this
import sys
import re
from redmine import Redmine

# Set your API key here. You can find it under "My account" in Redmine, i.e. http://redmine.mydomain.com/my/account
REDMINE_API_KEY = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"

# The hostname or IP of redmine.
REDMINE_HOST = "http://redmine.mydomain.com"

# Connect to the redmine server.
redmine = Redmine(REDMINE_HOST, key=REDMINE_API_KEY)

# The regex used for finding the issue id.
REDMINE_ISSUE_ID_REGEX = '(?:fixes|refs) \#(\d+)'

# The regex used for finding the gerrit change URL.
GERRIT_URL_REGEX = 'Gerrit URL: (http://gerrit.mydomain.com:8082/\d+)'

# Which projects to run the script for
GERRIT_PROJECTS = ["PROJECT_NAME"]

def CheckRedmineIssue(issueId, gerritUrl):
    isAlreadyUpdated = None
    isStatusNew = None
    
    try: 
        issue = redmine.issue.get(issueId, include='journals')
        
        isAlreadyUpdated = False
        for record in issue.journals:
            if record.user.id == 1: # 1 is the ID of user 'Redmine Admin' which gives the API key.
                m = re.search(GERRIT_URL_REGEX, record.notes)
                if m is not None and m.group(1) == gerritUrl:
                    isAlreadyUpdated = True
                    break
                
        isStatusNew = (issue.status.name == 'New')
        
    except redmine.exceptions.ResourceNotFoundError as e:
        print str(e) + ': issue {0:d} not found.'.format(issueId)
    
    return isAlreadyUpdated, isStatusNew
    

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option('-c', '--change', dest='changeid')
    parser.add_option('-u', '--change-url', dest='changeurl')
    parser.add_option('-p', '--project', dest='project')
    parser.add_option('-b', '--branch', dest='branch')
    parser.add_option('-s', '--uploader', dest='uploader')
    parser.add_option('-o', '--commit', dest='commit')
    parser.add_option('-a', '--patchset', dest='patchset')
    parser.add_option('-d', '--is-draft', dest='isdraft')
    parser.add_option('-t', '--topic', dest='topic')
    parser.add_option('--kind', dest='kind')
    parser.add_option('--change-owner', dest='change-owner')

    (options, x) = parser.parse_args(sys.argv)

    if options.project not in GERRIT_PROJECTS:
        print "Wrong project {0}!!".format(options.project)
        sys.exit(0)

    commitmsg = check_output(['git','cat-file','-p', options.commit])
    if not commitmsg or len(commitmsg) < 10:
        print "No commit msg!!"
        sys.exit(0)

    regex = re.compile(REDMINE_ISSUE_ID_REGEX, re.IGNORECASE)
    mgi = regex.finditer(commitmsg)
    
    updatedIssues = set()
    for mg in mgi:
        redmineIssueId = int(mg.group(1))
        if not redmineIssueId or redmineIssueId == 0:
            print "No issue is referenced in the commit message!!"
            sys.exit(0)

        # Only update this issue if it hasn't been updated in a previous iteration.
        if redmineIssueId in updatedIssues:
            print "The issue {0:d} has already been updated in a previous iteration!!".format(redmineIssueId)
            continue
            
        # If this is the first patch set, we will update the issue with the gerrit URL; otherwise,
        # we check if the issue has ever been updated with the gerrit URL. If yes, we skip it and 
        # if no, we will update the issue with the gerrit URL.
        if int(options.patchset) == 1:
            issue = redmine.issue.get(redmineIssueId)
            isStatusNew = (issue.status.name == 'New')
            print "This is the first patchset {0} for issue {1:d}. Will update the issue.".format(options.patchset, redmineIssueId)
        else:
            isAlreadyUpdated, isStatusNew = CheckRedmineIssue(redmineIssueId, options.changeurl)
            
            if isAlreadyUpdated is None:
                print "Issue {1:d} doesn't exist!!".format(redmineIssueId)
                continue
            elif isAlreadyUpdated:
                print "This is patchset {0} for issue {1:d}. A previous patchset has already been added to the issue.".format(options.patchset, redmineIssueId)
                continue
            else:
                print "This is patchset {0} for issue {1:d}. It hasn't been added to the issue. Adding it now.".format(options.patchset, redmineIssueId)   

        if options.isdraft == str("true"):
            redmineNotes = "Gerrit received a related DRAFT patchset '{0}' for Issue #{1:d}.\n".format(options.patchset, redmineIssueId)
        else:
            redmineNotes = "Gerrit received a related patchset '{0}' for Issue #{1:d}.\n".format(options.patchset, redmineIssueId)
        redmineNotes += "Uploader: {0}\n".format(options.uploader)
        redmineNotes += "Change-Id: {0}\n".format(options.changeid)
        redmineNotes += "Gerrit URL: {0}\n".format(options.changeurl)
        redmineNotes += "Project: {0}\n".format(options.project)
        redmineNotes += "Branch: {0}\n".format(options.branch)
            
        isUpdateDone = False
        if isStatusNew:
            print 'Setting the status of issue {0:d} to In Progress.'.format(redmineIssueId)
            isUpdateDone = redmine.issue.update(redmineIssueId, status_id=2, notes=redmineNotes) # The id of status "In Progress" is 2.
        else:
            isUpdateDone = redmine.issue.update(redmineIssueId, notes=redmineNotes)

        if isUpdateDone:
            updatedIssues.add(redmineIssueId)
            print 'Updating issue {0:d} succeeded.'.format(redmineIssueId)
        else:
            print 'Updating issue {0:d} failed.'.format(redmineIssueId)
        
    sys.exit(0)
